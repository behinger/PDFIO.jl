var documenterSearchIndex = {"docs":
[{"location":"README/#PDFIO-1","page":"PDFIO","title":"PDFIO","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"(Image: *nix Status) (Image: Win status) (Image: codecov.io) (Image: Doc Latest) (Image: Doc Stable) (Image: JOSS status)","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"PDFIO is a native Julia implementation for reading PDF files. It's an 100% Julia  implementation of the PDF specification. Other than a few well established  algorithms like flate decode (zlib library) or cryptographic operations  (openssl library) almost all of the APIs are written in native Julia. ","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"If you using the work you may cite the following:","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"@article{Dash_2019,\n\tdoi = {10.21105/joss.01453},\n\turl = {https://doi.org/10.21105%2Fjoss.01453},\n\tyear = 2019,\n\tmonth = {nov},\n\tpublisher = {The Open Journal},\n\tvolume = {4},\n\tnumber = {43},\n\tpages = {1453},\n\tauthor = {Sambit Dash},\n\ttitle = {{PDFIO}: {PDF} Reader Library for native Julia},\n\tjournal = {Journal of Open Source Software}\n} ","category":"page"},{"location":"README/#Need-for-a-PDF-Reader-API-1","page":"PDFIO","title":"Need for a PDF Reader API","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"The following are some of the benefits of utilizing this approach:","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"PDF files are in existence for over three decades. Implementations of the PDF writers are not always to the specification or they may even vary significantly from vendor to vendor. Everytime, you get a new PDF file there is a possibility that it may not work to the best interpretation of the specification. A script based language makes it easier for the consumers to quickly modify the code and enhance to their specific needs. \nWhen a higher level scripting language implements a C/C++ PDF library API, the scope is kept limited to achieving certain high  level tasks like, graphics or text extraction; annotation or signature content extraction; or page extraction or merging. \nHowever, PDFIO represents the PDF specification as a model in the  Model, View and Controller parlance. A PDF file can be represented  as a collection of interconnected Julia structures. Those  structures can be utilized in granular tasks or simply can be used  to understand the structure of the PDF document. \nAs per the PDF specification, text can be presented as part of the page content stream or inside PDF page annotations. An API like  PDFIO can create two categories of object types. One representing the text object inside the content stream and the other for the  text inside an annotation object. Thus, providing flexibility to  the API user. \nSince, the API is written as an object model of PDF documents, it's  easier to extend with additional PDF write or update capabilities.  Although, the current implementation does not provide the PDF  writing capabilities, the foundation has been laid for future  extension.","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"There are also certain downsides to this approach:","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"Any API that represents an object model of a document, tends to carry the complexity of introducing abstract objects. They can be opaque objects (handles) that are representational specific to the  API. They may not have any functional meaning. The methods are granular and may not complete one use level task. The amount of code needed to complete a user level task can be substantially higher. \nIn PDFIO the following steps have to be carried out:  a. Open the PDF document and obtain the document handle.   b. Query the document handle for all the pages in the document.  c. Iterate the pages and obtain the page object handles for each of    the pages.   d. Extract the text from the page objects and write to a file IO.   e. Close the document ensuring all the document resources are     reclaimed.\nThe API user may need to refer to the PDF specification (PDF-32000-1:2008)[@Adobe:2008] for semantic understanding of PDF  files in accomplishing some of the tasks. For example, the workflow  of PDF text extraction above is a natural extension from how text is  represented in a PDF file as per the specification. A PDF file is  composed of pages and text is represented inside each page content  object. The object model of PDFIO is a Julia language  representation of the PDF specification. ","category":"page"},{"location":"README/#Installation-1","page":"PDFIO","title":"Installation","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"The package can be added to a project by the command below:","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"julia> Pkg.add(\"PDFIO\")","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"The current version of the API requires julia 1.0. The detailed list of packages  PDFIO depends on can be seen in the Project.toml file. ","category":"page"},{"location":"README/#Sample-Code-1","page":"PDFIO","title":"Sample Code","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"The below mentioned code takes a PDF file src as input and writes the text data into a file out. It enumerates all the pages in the document and extracts the text from the pages. The extracted text is written to the output file. ","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"\"\"\"\n​```\n    getPDFText(src, out) -> Dict \n​```\n- src - Input PDF file from where text is to be extracted\n- out - Output TXT file where the output will be written\nreturn - A dictionary containing metadata of the document\n\"\"\"\nfunction getPDFText(src, out)\n    # handle that can be used for subsequence operations on the document.\n    doc = pdDocOpen(src)\n    \n    # Metadata extracted from the PDF document. \n    # This value is retained and returned as the return from the function. \n    docinfo = pdDocGetInfo(doc) \n    open(out, \"w\") do io\n    \n        # Returns number of pages in the document       \n        npage = pdDocGetPageCount(doc)\n\n        for i=1:npage\n        \n            # handle to the specific page given the number index. \n            page = pdDocGetPage(doc, i)\n            \n            # Extract text from the page and write it to the output file.\n            pdPageExtractText(io, page)\n\n        end\n    end\n    # Close the document handle. \n    # The doc handle should not be used after this call\n    pdDocClose(doc)\n    return docinfo\nend","category":"page"},{"location":"README/#Interactive-Code-Examples-1","page":"PDFIO","title":"Interactive Code Examples","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"One can also execute the following interactive commands on a Julia REPL to access objects of a PDF file. ","category":"page"},{"location":"README/#Getting-Document-Handle-1","page":"PDFIO","title":"Getting Document Handle","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"julia> doc = pdDocOpen(\"test/sample-google-doc.pdf\")\n\nPDDoc ==>\n\nCosDoc ==>\n\tfilepath:\t\t/home/sambit/.julia/dev/PDFIO/test/sample-google-doc.pdf\n\tsize:\t\t\t21236\n\thasNativeXRefStm:\t true\n\tTrailer dictionaries: \n\nCatalog:\n4 0 obj\n<<\n\t/Pages\t14 0 R\n\t/Type\t/Catalog\n>>\nendobj\n\nisTagged: none","category":"page"},{"location":"README/#Getting-Document-Info-1","page":"PDFIO","title":"Getting Document Info","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"julia> info = pdDocGetInfo(doc)\nDict{String,Union{CDDate, String, CosObject}} with 1 entry:\n  \"Producer\" => \"Skia/PDF m79\"","category":"page"},{"location":"README/#Getting-the-Number-of-Pages-1","page":"PDFIO","title":"Getting the Number of Pages","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"julia> npage = pdDocGetPageCount(doc)\n1","category":"page"},{"location":"README/#Get-the-Page-Handle-1","page":"PDFIO","title":"Get the Page Handle","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"julia> page = pdDocGetPage(doc, 1)\nPDFIO.PD.PDPageImpl(\n...\n)","category":"page"},{"location":"README/#View-Page-Text-Contents-1","page":"PDFIO","title":"View Page Text Contents","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"julia> pdPageExtractText(stdout, page);\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut \n        labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco \n        laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in \n        voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non \n        proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"As can be seen above, granular APIs are provided in PDFIO that can be used in combination to achieve a desirable task. For details, please refer to the Architecture and Design.","category":"page"},{"location":"README/#Features-1","page":"PDFIO","title":"Features","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"PDFIO is implemented in layers enabling following features:","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"Extract and render the Contents in of a PDF page. This ensures the contents are organized in a hierarchical grouping, that can be used for rendering of the content. Rendering is used here in a generic sense and not confined to painting on a raster device. For example, extracting document text can also be considered as a rendering task. pdPageExtractText is an apt example of the same. \nProvide functional tasks to PDF document access. A few of such functionalities are:\nGetting the page count in a document (pdDocGetPageCount)\nFinding labels in a document page (pdDocGetPageLabel)\nExtracting outlines defined in the document (pdDocGetOutline)\nExtracting document metadata information (pdDocGetInfo)\nValidation of signatures in a PDF document (pdDocValidateSignatures)\nExtracting fonts and font attributes (pdPageGetFonts, pdFontIsItalic etc.)\nAccess low level PDF objects and obtain information when high level APIs do not exist. ","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"The Architecture and Design discusses some of these scenarios. ","category":"page"},{"location":"README/#Licensing-1","page":"PDFIO","title":"Licensing","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"PDFIO is developed to contribute to both commercial activities and scientific research alike. However, we strongly discourage usage of this product for any illegal, immoral or unethical purposes. PDFIO License while provides rights under a permissible MIT Expat License, is conditioned upon maintaining strong moral, ethical and legal standards of the final outcome.","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit. (http://www.openssl.org/)","category":"page"},{"location":"README/#Contribution-1","page":"PDFIO","title":"Contribution","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"Contributions in form of PRs are welcome for any feature you will like to develop for the PDFIO library. You are requested to review the GitHub Issues section to understand the known issues. You can take up few of the issues, work on them and submit a PR. If you come across a bug or are unable to use the APIs in any manner, feel free to submit an issue. ","category":"page"},{"location":"README/#Similar-Packages-1","page":"PDFIO","title":"Similar Packages","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"Taro.jl is an alternate package in Julia that provides reading and extracting content from a PDF files. ","category":"page"},{"location":"README/#Reference-to-Adobe-1","page":"PDFIO","title":"Reference to Adobe","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"It's almost impossible to talk PDF without reference to Adobe. All copyrights or trademarks that are owned by Adobe or ISO, which have been referred to inadvertently without stating ownership, are owned by them. The author also has been part of Adobe's development culture in early part of his career with specific to PDF technology for about 2 years. However, the author has not been part of any activities related to PDF development from 2003. Hence, this API can  be considered a clean room development. Usage of words like  Carousel and Cos are pretty much public knowledge and large number of reference  to the same can be obtained from industry related websites etc.","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"The package contains Adobe Font Metrics (AFM) for 14 Core Adobe fonts. ","category":"page"},{"location":"README/#Test-files-1","page":"PDFIO","title":"Test files","text":"","category":"section"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"Not all PDF files that were used to test the library has been owned by the author. Hence, the author cannot make those files available to general public for distribution under the source code license. However, the author is grateful to the PDF document library maintained by mikal@stillhq.com. However, these files are no longer available in the link above. ","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"Some files are also included from openpreserve. These files can be distributed with CC0.","category":"page"},{"location":"README/#","page":"PDFIO","title":"PDFIO","text":"However, test files may have different licensing that the PDFIO. Hence we have now uploaded most test files to another project under PDFTest.","category":"page"},{"location":"arch/#Architecture-and-Design-1","page":"Architecture and Design","title":"Architecture and Design","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"The design philosophy of PDF documents can be understood by the article written by John Warnock, founding CEO of Adobe Systems, called the Camelot paper. Unlike, PostScript which is a Turing complete programming language, PDF is a file format. The operators in PDF do not leave a side effect on an execution stack, that can be further exploited by the subsequent operators. While one need not have full understanding of PostScript to understand PDF general complexities of a page description language (PDL)  like PostScript are seen in PDFs as well. Here are a few simple scenarios of similarities and dissimilarities of PDF vs PostScript are presented here. This will help you understand the design principles of PDF.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Execution Order and Page: PostScript is an execution engine. It would execute the code as the operators are received and results are left on the execution stack as side-effects. Depending on the device rendering capabilities, PostScript would load the rendered output to the device on a call of showpage. PDF does not have the flexibility of execution of a programming language. Generally, PDF content are organized as page objects. The content to be rendered and the resources (fonts and images) are associated with a page. Moreover, the content is rendered in the order in which they appear. Unless otherwise specified, the ink is considered opaque. Thus a content rendered later may overwrite the content rendered earlier if there is an overlap.\nContent Order vs. Reading Order: PDLs focus on final look and feel of the output and not the reading order of the text or artifacts. For example, fonts tend to be an expensive resource to load at least under low memory conditions. Once loaded an execution engine may like to render all the content utilizing the font resource earlier than render the artifacts in the reading order. A document optimized for such purpose will tend to organize all text utilizing a specific fonts at one place.\nContent Objects vs. Non-Content Objects: Without getting much into the definition complexities, we can state a content leaves an artifact on a page and is rendered. While some other objects may affect the user interface or provide additional document metadata information and they are not rendered on a PDF page. One example will be PDF outlines or navigation links. They only are shown on a user interface and not on a rendered page.\nRandom vs. Sequential Access: PDF files are designed for random access of the document. You can get to any page and access the contents of the page. While PostScript was not designed for that purpose. It typically will be loaded once and executed.","category":"page"},{"location":"arch/#PDF-specification-ISO-32000-1-and-ISO-32000-2-1","page":"Architecture and Design","title":"PDF specification ISO-32000-1 and ISO-32000-2","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"The API is developed around PDF specification, notably around ISO-32000-1, that can be downloaded from Adobe. Some attempts have been made to consider certain features of PDF-2.0 (ISO-32000-2). However, the attempts have been made with draft versions of the specification. The final version of the specification has not been reviewed for the implementations. Hence, the support is only experimental.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"The API derives heavily from the PDF specification and tries to be as compliant to the specification as practical. Any significant discrepancies in the APIs have to be compared with the PDF specification for clarification and accuracy. The API is an extension to the PDF specification. Hence, it's recommended the users of the API refer to the specification as well for a clearer understanding of the working of the API. Where a feature is best understood from the specification, reference to the specification will be provided than elaborating it in the API documentation.","category":"page"},{"location":"arch/#PDF-Components-1","page":"Architecture and Design","title":"PDF Components","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"PDF specification identifies the following components of a file. For details about the components please refer to the Chapter-7 of the PDF specification 1.7.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Objects\nFile Structure\nDocument Structure\nContent Objects","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Based on the components being used the API is divided into two layers.","category":"page"},{"location":"arch/#COS-Layer-1","page":"Architecture and Design","title":"COS Layer","text":"","category":"section"},{"location":"arch/#Objects-1","page":"Architecture and Design","title":"Objects","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Carousel Object System (COS) is an object representation for both simple and composite objects. CosObject is the highest level abstraction that all the objects inherit from. The objects supported in PDF are:","category":"page"},{"location":"arch/#Simple-1","page":"Architecture and Design","title":"Simple","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"CosNull - A singleton object representing a null in PDF. \nCosBoolean Values: CosTrue or CosFalse\nCosNumeric(abstract) Concrete Types: CosInt, CosFloat\nCosString(abstract) - String in PDF is a collection of binary data and does not represent a meaningful text unless it's associated with a specific font and encoding. For clarity, please refer to the section 7.3.4 and 7.9.3 of the PDF specification. Strings can be represented as hexadecimal notations or direct byte values. They are internally knows as CosXString or CosLiteralString respectively. The consumers of the APIs do not have to be affected by such distinctions.\nCosName - Very similar to Symbol objects of Julia. ","category":"page"},{"location":"arch/#Composite-1","page":"Architecture and Design","title":"Composite","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"CosArray - an array collection of CosObjects. \nCosDict - an associative collection of name value pairs where names are of type CosName and values can be of any CosObject\nCosStream - very similar to CosDict, but the dictionary is followed by arbitrary binary data. This data can be in a compressed and encoded form by a series of algorithms known as filters.","category":"page"},{"location":"arch/#File-Structure-1","page":"Architecture and Design","title":"File Structure","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"PDF file structure provides how the objects are arranged in a PDF file. PDF is designed to be accessed in a random access order. Some of the objects in PDF like fonts can be referred from multiple page objects. To address these concerns objects are provided reference identifiers and mappings are provided from various locations in the PDF files. Moreover, to reduce the size of the files, the objects are put inside stream containers and can be compressed. Access to a specific object reference may need several lookups before the actual object can be traced. All these lead to a fairly complex arrangement of objects. CosDoc wraps all the object reference schemes and provide a simplified API called cosDocGetObject and simplifies object look up. Thus any PDF object can be classified into the following forms based on how they are represented in a document:","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Direct Objects - Direct objects are defined where they are referred or used.\nIndirect Objects - Indirect objects have reference identifiers, there location in a PDF document is described through a Object Reference identifier.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"146 0 obj # Object Refence (146, 0) can be indirect object\n<<\n  \t/Subject\t(AU-B Australian Documents) # CosString is a direct object\n  \t/CreationDate\t(27 May 1999 11: 1) \n  \t/Title\t(199479714D)\n  \t/ModDate\t(D:19990527113911)\n  \t/Author\t(IP Australia)\n  \t/Keywords\t(Patents)\n  \t/Creator\t(HPA image bureau 1998-1999)\n  \t/Producer\t(HPA image bureau 1998-1999)\n>>\nendobj","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Normally, direct and indirect objects can be used interchangeably. But, there are certain cases where the specification dictates objects will be either direct or indirect. For example, objects used inside of a page content can be only direct objects. In such cases, names are used instead of object identifiers. Resources like fonts in a page content are names and not object identifiers.","category":"page"},{"location":"arch/#Document-Structure-1","page":"Architecture and Design","title":"Document Structure","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"There are additional structures in the document that are commonly used inside a PDF document. Some of them are:","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Document Catalog Dictionary - The root object from where PDF document reading begins. For example, this has the reference to a page tree.\n154 0 obj\n<<\n\t/Type\t/Catalog\n\t/Pages\t152 0 R\n>>\nendobj\nPage Tree - Pages in a document can be arranged in a generic tree structure. While for better access binary search trees are the recommended approach there is no hard rule and document creators are free to define the structure in any manner that's relevant to them.\n152 0 obj\n<<\n\t/Type\t/Pages\n\t/Kids\t[147 0 R 148 0 R 149 0 R 150 0 R 151 0 R ]\n\t/Count\t30\n>>\nendobj","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"In the above example, Kids  represents a direct CosArray that contains  reference object identifiers (147 0), (148 0),  (149 0),  (150 0),  (151 0).","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Name Dictionary - Associates various named components to other hierarchical structures in a document. Typically, represented as an object referenced in the document catalog.","category":"page"},{"location":"arch/#Is-COS-Layer-Sufficient-for-PDF-parsing?-1","page":"Architecture and Design","title":"Is COS Layer Sufficient for PDF parsing?","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Since COS layer represents the objects, document structure and file structure, is it sufficient to parse a PDF file? The answer to this question is mostly yes. You can virtually do anything with a PDF file using only methods defined in the COS layer.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"But, this will enforce one to follow the PDF specification in totality for extracting any information from a PDF file. But, that can overwhelm one to implement any significant task with PDF files.\nSecondly, COS layer does not expose the Contents objects of the PDF pages. Hence, no rendering related activity can be carried out in this layer.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"A PD Layer is developed to create functional PDF tasks as well as to render PDF content objects. However, when a functional implementation is not available in a PD Layer, COS Layer can be used to implement a functionality with low level APIs. Most of the PD Layer implementations utilize methods from the COS Layer. However, a good COS layer method implementation should never refer the a methods of the PD layer.","category":"page"},{"location":"arch/#Example-1","page":"Architecture and Design","title":"Example","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Extracting files embedded inside a PDF document is not currently available as a PD Layer functionality. However, the same has been achieved using COS layer functions. The code is available in the automated test cases as well.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"function pdfhlp_extract_doc_attachment_files (filename, dir=tempdir())\n  \tfile=rsplit(filename, '/',limit=2)\n  \tfilenm=file[end]\n  \tdirpath=joinpath(dir,filenm)\n  \tisdir(dirpath) && rm(dirpath;force=true, recursive=true)\n  \tmkdir(dirpath)\t\n  \tdoc=pdDocOpen(filename)\n  \tcosDoc=pdDocGetCosDoc(doc)\n  \ttry\n    \tnpage= pdDocGetPageCount(doc)\n    \tfor i=1:npage\n      \t\tpage = pdDocGetPage(doc, i)\n      \t\tcospage = pdPageGetCosObject(page)\n      \t\tannots = cosDocGetObject(cosDoc, cospage, cn\"Annots\")\n      \t\tannots === CosNull && continue\n      \tend\n      \tannotsarr=get(annots)\n      \tfor annot in annotsarr\n        \tannotdict = cosDocGetObject(cosDoc, annot)\n        \tsubtype = get(annotdict, cn\"Subtype\")\n        \tif (subtype == cn\"FileAttachment\")\n          \t\tfilespec = cosDocGetObject(cosDoc, annotdict, cn\"FS\")\n          \t\tef = get(filespec, cn\"EF\")\n          \t\tfilename = get(filespec, cn\"F\") \n                #UF could be there as well.\n          \t\tstmref = get(ef, cn\"F\")\n          \t\tstm = cosDocGetObject(cosDoc, stmref)\n          \t\tbufstm = get(stm)\n          \t\tbuf = read(bufstm)\n          \t\tclose(bufstm)\n          \t\tpath = joinpath(dirpath, get(filename))\n          \t\twrite(path, buf)\n        \tend\n      \tend\n  \tfinally\n \t\tpdDocClose(doc)\n  \tend\nend","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"As can be seen, this requires one to understand the PDF specification to skim through the PDF objects to extract the file from the relevant object where it's embedded.","category":"page"},{"location":"arch/#Limitations-1","page":"Architecture and Design","title":"Limitations","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"While the implementation of the COS layer is fairly elaborate, PDF security handlers are not implemented as part of this API. Hence, this implementation is not effective where a document is encrypted with passwords. Such documents typically have all the string and stream objects encrypted using document passwords. Hence, cannot be read by PDFIO.","category":"page"},{"location":"arch/#PD-Layer-1","page":"Architecture and Design","title":"PD Layer","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Understanding the scope of COS layer leaves out the following functionalities for the PD layer.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Extract and render the Contents in of a PDF page. This ensures the contents are organized in a hierarchical grouping, that can be used for rendering of the content. Rendering is used here in a generic context and not confined to painting on a raster device. For example, extracting document text can also be considered as a rendering task. pdPageExtractText is an apt example of the same.\nProvide functional tasks to PDF document access. A few of such functionalities are:\nGetting the page count in a document\nFinding labels in a document page\nExtracting outlines defined in the document\nExtracting document metadata information\nValidation of signatures in a PDF document\nExtracting fonts and font attributes","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"PD layer is an ever expanding layer. As newer functionality are implemented PD layer will introduce newer methods, that will enhance the library capabilities.","category":"page"},{"location":"arch/#Limitations-2","page":"Architecture and Design","title":"Limitations","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Although PD layer has been developed, PDF specification is quite vast. Functionalities currently exposed are mostly implemented to aid text extraction from document better. However, more advanced features can be added as and when needed to the APIs. Writing PDF output has not been implemented. When implemented, PD layer needs to be expanded for the same.","category":"page"},{"location":"arch/#Common-Data-Structures-(CD-Layer)-1","page":"Architecture and Design","title":"Common Data Structures (CD Layer)","text":"","category":"section"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"PDF is a platform independent file format. This requires, certain features that needs to be abstracted to support multitude of platforms. Here are some object types where certain special handing of data may be needed:","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Strings - For example, text which are part of content objects can be  represented very well using CosString objects. But, PDF may have text that  do not associate a font or encoding thereof associated to string objects. In  such cases, unicode strings or PDF encoded strings are represented. PDF  encoding is a consistent representation of printable characters that can be  applied irrespective of platform where the file is used. This can be  considered as the default encoding of a PDF file.\nDate and Time - The PDF file may have creation time, modification time embedded in the document. Such data is represented as a string object. However, translating such time attributes to time objects for comparison is definitely essential.\nFile and File System - Unix, Microsoft Windows, Mac OS X have their own file representations that may be different. Julia itself being a platform independent language caters directly to such needs.\nName tree and Number trees - General purpose tree like data structures that hold a hierarchy based on name strings or numbers. Although, these objects are defined they are not exposed outside as they generally are used in the internal context of operations. An API user may not normally need to manipulate them.","category":"page"},{"location":"arch/#","page":"Architecture and Design","title":"Architecture and Design","text":"Now that you have some understanding of the PDF architecture you can refer to the API Reference to understand the scope of each method and use them as needed for your applications. Please keep the PDF specification handy to understand the nuances of the APIs.","category":"page"},{"location":"encrypt/#Encryption-in-PDF-1","page":"Encryption in PDF","title":"Encryption in PDF","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"PDF files can be encrypted across the complete file or selectively for specific sections. The encryption scheme used in PDFs can be based on the PDF standard specification or can be controlled by custom schemes developed by the PDF creators. These flexibilities can be achieved by the following security handlers of the PDF processors.","category":"page"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"Password based Standard Security Handlers\nPKI certificate based Public Key Security Handlers\nCrypt filters that can be used for specific streams in a PDF document","category":"page"},{"location":"encrypt/#Encryption-Methods-1","page":"Encryption in PDF","title":"Encryption Methods","text":"","category":"section"},{"location":"encrypt/#What-can-be-encrypted?-1","page":"Encryption in PDF","title":"What can be encrypted?","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"Not all information in a PDF file is encrypted. Only the streams and strings that tend to have informational content are encrypted. Integers, booleans or any such information that is only structural are not encrypted. Document metadata that can be used for search and other information extraction process need not be encrypted in a PDF document. Secondly, care is always taken such that content is not encrypted multiple number of times. For example, only one encryption filter is permitted in a stream. Once such a filter is specifically chosen for a stream the document default filters are not applicable to such streams. Strings that are part of object streams that are encrypted are excluded from further encryption.","category":"page"},{"location":"encrypt/#Process-of-Encryption-1","page":"Encryption in PDF","title":"Process of Encryption","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"PDF encryption is based on a symmetric key algorithm based on older RC4 or AES-128 bit schemes or modern AES-256 bit encryption algorithms. These methods require a 40, 128 or 256 bit key be used to encrypt or decrypt the PDF document. Since, the key has to be kept inside the PDF document, password based approaches or PKI Certificate based approaches are taken to secure the encryption key. One encryption key is used per crypt filter and once the API successfully manages to decrypt the key it can be caches securedly for subsequent operations.","category":"page"},{"location":"encrypt/#Standard-Security-Handlers-1","page":"Encryption in PDF","title":"Standard Security Handlers","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"Standard security handler provides a flexible mechanism of securing the file encryption key using two passwords. Namely, document open password (user password) and document permission (owner password). A document may not have a user password. In such cases, providing a blank string as input can open the document. However, it must be noted that the file encryption key is still used in these cases as well. And such document is not equivalent to a document without passwords. Owner password defaults to the user password if it's not explicitly set. The older RC4 or AES-128bit encryption schemes were based on user password being used to encrypt the file encryption key and owner password being used to encrypt the user password. However, the modern AES-256bit system utilizes a hashed based validation than encrypting one password with the other. However, either the owner password or the user password can be used to retrieve the document encryption key.","category":"page"},{"location":"encrypt/#Public-Key-Security-Handlers-1","page":"Encryption in PDF","title":"Public Key Security Handlers","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"Public key security handler utilizes the public key of a digital certificate to encrypt the file encryption key that can be only be decrypted by a specific set of recipients whose public key was used to encrypt the file encryption keys. Again, the document can be decrypted only by the recipient on successful production of the private key of the certificate.","category":"page"},{"location":"encrypt/#Permissions-1","page":"Encryption in PDF","title":"Permissions","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"PDF specification provides permissions for users different from that of the owners. Owners have no usage restriction while users can be limited by certain permissions. The permissions are expected to be enforced by the reader applications. Once decrypted there is no way to technically encfore limitations. In the context of the API, we do not restrict any APIs but expect the consumer of the APIs to enforce the permissions as desired. The permission can be found in the security handlers keys dictionary mapped to each crypt filter. The permissions can be accessed by:","category":"page"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"cosdoc.secHandler.keys[<Crypt Filter Name>][1]","category":"page"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"When the user password is used to authenticate the document permission entry is cached. However, when an owner password is used the value cached is 0xffffffff signifying all the permissions are available.","category":"page"},{"location":"encrypt/#Prompting-for-Access-1","page":"Encryption in PDF","title":"Prompting for Access","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"As discussed earlier, not all PDF content may be encrypted. Hence, the prompting for password or token to decrypt (in case of PKI security handler) can occur when such a need is felt. When a particular piece of content requires decryption in case of a standard security handler a Base.getpass() based challenge is thrown on the stdout. However, this may not be a convenient way to programatically utilize and API. The following APIs provide additional keyword access=predicate as a way to override the default behavior. Following is an example of a pdDocOpen call utilizing a fixed password as input.","category":"page"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"doc = pdDocOpen(\"file.pdf\", access=()->Base.SecretBuffer!(copy(b\"password\")))","category":"page"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"The same interface can be used with the method cosDocOpen as well. ","category":"page"},{"location":"encrypt/#Keeping-Access-Secured-1","page":"Encryption in PDF","title":"Keeping Access Secured","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"It must have come to you as a surprise the usage of such a complex predicate for passing a simple password. However, String objects being immutable, it's never a desired in security applications to have secured information lying in the memory indefinitely as Strings. While Vector{UInt8} objects get reclaimed, the underlying memory is never overwritten leaving out secured information in the memory to be harvested with crash dumps, pagefile or memory walks. Base.SecureBuffer comes handy in such cases as it clears off the underlying memory to zero or provides a shred! method that can be utilized to clear off the memory on demand. The predicate must return a Base.SecretBuffer object to be consumed by the security handler.","category":"page"},{"location":"encrypt/#Caching-of-the-File-Encryption-Key-1","page":"Encryption in PDF","title":"Caching of the File Encryption Key","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"Just as much like the password, the computed file encyption key is a crucial piece of information that is cached in the memory with the security handler object. Although, it resides at: cosdoc.secHandler.keys[<Crypt Filter Name>][2]. It's encrypted with a symmetric key and nonce generated during the initialization of the secuirty handler and cached to a temporary file. When a decryption task is to be carried out the key and nonce are secured from the file and used to decrypt the file encryption key. As soon as the task is over the file encryption keys are shred!ed by a SecureBuffer interface. Thus a random dump of memory may neither have the password nor the file encryption key resident in memory. With the API being open source we do not expect to provide any protection against debugging. ","category":"page"},{"location":"encrypt/#PKI-Security-Handler-1","page":"Encryption in PDF","title":"PKI Security Handler","text":"","category":"section"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"PKI security handler can be used to decrypt PDF documents if needed. The handler will be invoked when needed to decrypt data very similar to the standard security handler. The default method provides capabilities to decrypt the document using a PKCS#12 (.p12) file as a keystore. However, the default behavior can be easily overwritten by providing your own access function. The default code looks like below:","category":"page"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"function get_digital_id()\n    p12file = \"\"\n    while !isfile(p12file)\n        p12file =\n            prompt(\"Select the PCKS#12 (.p12) certificate for the recepient\")\n    end\n    p12pass = getpass(\"Enter the password to open the PKCS#12 (.p12) file\")\n    return shred!(x->read_pkcs12(p12file, x), p12pass)\nend\n\ndoc = pdDocOpen(\"file.pdf\", access=get_digital_id)","category":"page"},{"location":"encrypt/#","page":"Encryption in PDF","title":"Encryption in PDF","text":"The functionality has been developed with OpenSSL. OpenSSL ENGINE interface can be used to implement another version of get_digital_id method using a PKCS#11 based interface to enable HSM or hardware tokens as certificate stores.","category":"page"},{"location":"digsig/#Digital-Signatures-1","page":"Digital Signatures","title":"Digital Signatures","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"The integrity of a PDF document can be protected by using digital signatures. The signatures can be of various kinds; namely, signature images, biometric information as well as mathematical equations as in Public Key Infrastructure (PKI) based signatures. While PDF documents can support these varied signature schemes, the API designed here is only limited to the interoperable signature schemes related to PKI certificates described in the PDF specification section 12.8.3. PKI standards are fairly involved set of operations, and exhaustive explanation of these operations cannot be possible in this section. Some high level concepts are described here for the API user to get familiarity of the operations.","category":"page"},{"location":"digsig/#Basics-of-Public-Key-Infrastructure-(PKI)-1","page":"Digital Signatures","title":"Basics of Public Key Infrastructure (PKI)","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"When Alice wants to send a PDF document to Bob, Bob would like to understand if:","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Alice only sent the document\nThe document he got is what Alice intended to send and not a tampered version.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Digital signature schemes address these problems. Public Key Infrastructure (PKI) provides one such solution to the problem. It expects Alice to own two keys, one private key (K_v), that she has to keep absolutely secretly under her possession and a second one called public key (K_p) that she has to provide to Bob. When an information is encoded using the private key (K_v), it can only be decoded by the public key (K_p) thus verifying the operation. This is the foundation of the asymmetric cryptography.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Following are the digital signing operations as carried out by Alice:","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Alice creates a digest of the PDF document using a digest algorithm.\nThe digest is a one way derivative of the document, that cannot be reverse engineered to get back to the original document.\nThe digest algorithms are such that even the slightest change in the document will have a digest that is completely different from the original digest.\nAlice encodes the digest plain text using K_v. This encoded cipher text is called the signature.\nAlice embeds the signature, the digest algorithm she used in in the PDF document and sends it to Bob.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Bob uses the following validation or verification steps:","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Bob computes the digest of the document using the same algorithm Alice used by picking up the information from the PDF.\nHe picks up the cipher text from the signature and applies decoding method using K_p.\nThe plain text thus obtained is compared with the digest generated in step 1 to ensure the document has not been tampered with.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"The APIs developed here are confined to the validation and verification operations only and does not encompass the signing operations.","category":"page"},{"location":"digsig/#Digital-Certificates-1","page":"Digital Signatures","title":"Digital Certificates","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"One problem which has still not been addressed in the previous example is how can Alice communicate to Bob her public key (K_p). This is a significant concern in the internet world as Alice and Bob may never meet in person. Secondly, Alice may have to communicate to many other people and not just Bob and such information exchange needs a standardized framework so that she can provide same information to all the people she can interact with. She can contact a certifying authority (CA) and provide her public key (K_p) and other personal details like name, contact etc. which will be signed by the private key of the CA and presented in a standardized format. The process is called issuance of certificates and the digital information Alice receives is called a X509 certificate or a certificate. Any person who has Alice's digital certificate can essentially validate the authenticity of the certificate by verifying with the CA's public key.","category":"page"},{"location":"digsig/#Chain-of-Trust-1","page":"Digital Signatures","title":"Chain of Trust","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"In a distributed world, a single CA is hard to conceive and not scalable to issue and manage all the certificates. Thus, CAs typically establish a network of subordinate CAs who can manage certificates on their behalf by issuing additional certificates that can be used as CAs to issue further certificates downstream. This leads to one root certifying authority or root and large number of subordinate certifying authority or intermediate CA. The root CA certificate is issued by the root CA itself. This process is called self-signing. A certificate that is actually used for any operation (like signing of documents) also known as end entity certificate is trusted only when the root as well as all intermediate CA certificates that were used to validate the certificates are trust worthy. This essentially means the certificate of all such CAs will be validated against their respective CA certificates establishing a chain of trust.","category":"page"},{"location":"digsig/#Trust-Store-1","page":"Digital Signatures","title":"Trust Store","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Any applications validating a certificate needs to maintain a trust store of certificates. A trust store must contain the root and all intermediate CA certificates to be able to validate an end entity certificates.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"The API uses the file: <PDFIO Dir>/data/certs/cacerts.pem as a certificate trust store.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"An end-entity certificate included in the trust store is not validated for establishing a chain of trust. Hence, is generally discouraged. However, in case of self-signed certificates this may be the only means to establish trust.","category":"page"},{"location":"digsig/#Expiry-and-Revocation-1","page":"Digital Signatures","title":"Expiry and Revocation","text":"","category":"section"},{"location":"digsig/#Importance-of-Time-1","page":"Digital Signatures","title":"Importance of Time","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Asymmetric encryption works because of the following two inherent assumptions:","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"The digest algorithm is strong enough so that one cannot find another document that easily which will reproduce the same digest even when a large number of computing resources are provided within a reasonable time.\nKnowing the public key one cannot possibly find a private key using large  number  of computing resources within a reasonable time.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Hence, as computing power improves, there is a consistent need to search for algorithms that keep the assumption valid. Hence, as a policy certificates are kept ephemeral, only being valid for one to three years. As a policy of verification the time validity of all the certificates are reviewed as well.","category":"page"},{"location":"digsig/#Certificate-Revocation-1","page":"Digital Signatures","title":"Certificate Revocation","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"A valid certificate can be revoked by a CA if it's found that the certificate was compromised in some manner. A compromise includes exposure of private key by any means to any undesirable party. Such information can be periodically updated in a ledger by a CA that can be downloaded by the clients. These are called as Certificate Revocation Lists (CRL). With internet being so much more popular the certificates can be queried with the CA intermittently for their validity using the Online Certificate Security Protocol (OCSP) rather than a lookup on the cached CRLs. Certificate validation process includes referring to the said databases for revocation information.","category":"page"},{"location":"digsig/#Signature-Validity-1","page":"Digital Signatures","title":"Signature Validity","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Signature in a document is said to be valid when:","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"The certificate which it's to be validated against is valid when the signature was computed. This shall mean:\nThe certificate had not expired\nThe certificate had not been revoked by the issuing CA\nA complete trust chain can be established of valid certificates\nIt can be established the signature was originated from the content that it claims to represent.\nThe certificate used for signing is the valid certificate for the purpose, policy defined and of the profiles that such a certificate should have. Purpose, policy and profile mandate certain attributes that must be defined in a certificate. They also establish certain constraints in their relationships.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Since, time is an important factor in validating certificates, the same can affect signatures as well. Signatures can be validated at the time when they were generated if such information is available with the document. Otherwise, the signatures are validated in the current time.","category":"page"},{"location":"digsig/#Digital-Signatures-in-PDF-1","page":"Digital Signatures","title":"Digital Signatures in PDF","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"As per the PDF specification, the following functions can be carried out with signing of PDF files:","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Signing and embedding a signature in the document\nValidation of the signature\nGranular control of PDF document objects based on the permissions enabled with validation of a signature. (DocMDP, UR and FieldMDP)\nIncremental updates to the document with changes preserved for authoritative version management.\nDefining a document secured store and populating validation related information (PDF-2.0).\nCreating a document time stamp and ensuring that is updated effectively for long time validation of signatures when the certificates may expire or become invalid due to weaker cipher specification in them (PDF-2.0).","category":"page"},{"location":"digsig/#API-and-its-Limitations-1","page":"Digital Signatures","title":"API and its Limitations","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"The API provided here is a single method pdDocValidateSignatures. The method provides the following two functionalities:","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Scans the PDF document for approval signatures appearing in the document as form fields and validates those. For each such signature it returns a status dictionary with certificate details, pass status of the validation or failures and failure reasons if any.\nGiven an optional parameter, exports all the certificates embedded in the PDF document so that the they can be reviewed and intermediate and root certificates can be picked up and added to the trusted certificate store.","category":"page"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"The functionality in terms of validation is fairly basic and does not  review the policies, profiles or purpose of the certificates.","category":"page"},{"location":"digsig/#Reference-1","page":"Digital Signatures","title":"Reference","text":"","category":"section"},{"location":"digsig/#","page":"Digital Signatures","title":"Digital Signatures","text":"Digital Signature article on Wikipedia\nAdobe Systems Inc. (2008) Document Management - Portable Document Format - Part 1: PDF 1.7, retrieved from Adobe.","category":"page"},{"location":"#API-Reference-1","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"#","page":"API Reference","title":"API Reference","text":"The APIs are segregated into 3 modules:","category":"page"},{"location":"#","page":"API Reference","title":"API Reference","text":"Common\nCOS\nPD","category":"page"},{"location":"#","page":"API Reference","title":"API Reference","text":"Common module has general system access and file access and parsing APIs.","category":"page"},{"location":"#","page":"API Reference","title":"API Reference","text":"COS module is the low level file format for PDF. Carousel Object Structure was original term proposed inside Adobe which later transformed into Acrobat. COS layer has the object structure, definition and the cross references to access them.","category":"page"},{"location":"#","page":"API Reference","title":"API Reference","text":"PD module is the higher level document access layer. Accessing PDF pages or extracting the content from there or understanding document rendering using fonts or image objects will be typically in this layer. ","category":"page"},{"location":"#","page":"API Reference","title":"API Reference","text":"A detailed explanation of these layers and their rational has been explained in the Architecture and Design section.","category":"page"},{"location":"#Common-1","page":"API Reference","title":"Common","text":"","category":"section"},{"location":"#","page":"API Reference","title":"API Reference","text":"CDTextString\nCDDate\nCDDate(::CDTextString)\ngetUTCTime\nCDRect","category":"page"},{"location":"#PDFIO.Common.CDTextString","page":"API Reference","title":"PDFIO.Common.CDTextString","text":"    CDTextString\n\nPDF file format structure provides two primary string types. Hexadecimal string CosXString and literal string CosLiteralString. However, these are mere binary representation of string types without having any encoding associated for semantic representation. Determination of encoding is carried out mostly by associated fonts and character maps in the content stream. There are also strings used in descriptions and other attributes of a PDF file where no font or mapping information is provided. This represents the string type in such situations. Typically, strings in PDFs are of 3 types.\n\nText string  a. PDDocEncoded string - Similar to ISO_8859-1  b. UTF-16BE strings\nASCII string\nByte string - Pure binary data no interpretation\n\n1 and 2 can be represented by the CDTextString. convert methods are provided to translate the CosString to CDTextString\n\nRef: PDF Specification Section 7.9.2\n\nNote: Internally CDTextString is a String object of julia. \n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Common.CDDate","page":"API Reference","title":"PDFIO.Common.CDDate","text":"    CDDate\n\nInternally represented as string objects, these are timezone enabled date and time objects.\n\nPDF files support the string format: (D:YYYYMMDDHHmmSSOHH'mm)\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Common.CDDate-Tuple{String}","page":"API Reference","title":"PDFIO.Common.CDDate","text":"    CDDate(s::CDTextString)\n\nPDF files support the string format: (D:YYYYMMDDHHmmSSOHH'mm)\n\nExample\n\njulia> date = CDDate(\"D:20190425173659+05'30\")\nD:20190425173659+05'30\n\njulia> date.d\n2019-04-25T17:36:59\n\njulia> date.tz\n5 hours, 30 minutes\n\njulia> date.ahead\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#PDFIO.Common.getUTCTime","page":"API Reference","title":"PDFIO.Common.getUTCTime","text":"    getUTCTime(d::CDDate) -> CDDate\n\nRemoves the timezone information and returns the CDDate at UTC.\n\nExample\n\njulia> getUTCTime(CDDate(\"D:20190425173659+05'30\"))\nD:20190425120659Z\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.Common.CDRect","page":"API Reference","title":"PDFIO.Common.CDRect","text":"    CDRect\n\nCosArray representation of a rectangle in the lower left and upper right point format\n\nNote: CDRect maps to a Rect object in the Rectangle package. \n\nExample\n\njulia> CDRect(CosArray(CosObject[CosInt(0), CosInt(0), CosInt(840), CosFloat(640)]))\nRect:[0.0 0.0 840.0 640.0]\n\n\n\n\n\n","category":"type"},{"location":"#COS-Objects-1","page":"API Reference","title":"COS Objects","text":"","category":"section"},{"location":"#","page":"API Reference","title":"API Reference","text":"CosObject\n    CosNull\nCosString\nCosName\n@cn_str\nCosNumeric\n  CosInt\n  CosFloat\nCosBoolean\nCosDict\nset!(::CosDict, ::CosName, ::CosObject)\nCosArray\nlength(::CosArray)\nCosStream\nCosIndirectObjectRef\nget","category":"page"},{"location":"#PDFIO.Cos.CosObject","page":"API Reference","title":"PDFIO.Cos.CosObject","text":"    CosObject\n\nPDF is a structured document format with lots of internal data structures like dictionaries, arrays, trees. CosObject is the interface to access these objects and get detailed access to the objects and gather additional information. Although, defined in the COS layer, objects of these type are returned from almost all the APIs. Hence, the objects have a separate significance whether you need to use the Cos layer or not. Below is the object hierarchy.\n\nCosObject                           Abstract\n    CosNull                         Value (CosNullType)\nCosString                           Abstract\nCosName                             Concrete\nCosNumeric                          Abstract\n    CosInt                          Concrete\n    CosFloat                        Concrete\nCosBoolean                          Concrete\n    CosTrue                         Value (CosBoolean)\n    CosFalse                        Value (CosBoolean)\nCosDict                             Concrete\nCosArray                            Concrete\nCosStream                           Concrete (always wrapped as an indirect object)\nCosIndirectObjectRef                Concrete (only useful when CosDoc is available)\n\nNote: As a reader API you may not need to instantiate any of CosObject types. They are normally populated as a result of parsing a PDF file. \n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.CosNull","page":"API Reference","title":"PDFIO.Cos.CosNull","text":"    CosNull\n\nPDF representation of a null object. Can be applied to CosObject of any type.\n\n\n\n\n\n","category":"constant"},{"location":"#PDFIO.Cos.CosString","page":"API Reference","title":"PDFIO.Cos.CosString","text":"    CosString\n\nAbstract type that represents a PDF string. In PDF objects are mere byte representations. They translate to actual text strings by application of fonts and associated encodings.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.CosName","page":"API Reference","title":"PDFIO.Cos.CosName","text":"    CosName\n\nName objects are symbols used in PDF documents.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.@cn_str","page":"API Reference","title":"PDFIO.Cos.@cn_str","text":"    @cn_str(str) -> CosName\n\nA string decorator for easier instantiation of a CosName\n\nExample:\n\njulia> cn\"Name\"\n/Name\n\n\n\n\n\n","category":"macro"},{"location":"#PDFIO.Cos.CosNumeric","page":"API Reference","title":"PDFIO.Cos.CosNumeric","text":"    CosNumeric\n\nAbstract type for numeric objects. The objects can be an integer CosInt or float CosFloat.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.CosInt","page":"API Reference","title":"PDFIO.Cos.CosInt","text":"    CosInt\n\nAn integer in PDF document.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.CosFloat","page":"API Reference","title":"PDFIO.Cos.CosFloat","text":"    CosFloat\n\nA numeric float data type.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.CosBoolean","page":"API Reference","title":"PDFIO.Cos.CosBoolean","text":"    CosBoolean\n\nA boolean object in PDF which is either a CosTrue or CosFalse\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.CosDict","page":"API Reference","title":"PDFIO.Cos.CosDict","text":"    CosDict\n\nName value pair of a PDF objects. The object is very similar to the Dict object. The key has to be of a CosName type.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.set!-Tuple{CosDict,CosName,CosObject}","page":"API Reference","title":"PDFIO.Cos.set!","text":"    set!(dict::CosDict, name::CosName, obj::CosObject) -> CosDict\n\n    set!(stm::CosStream, name::CosName, obj::CosObject) -> CosStream\n\n\nSets the value on a dictionary object. Setting a CosNull object deletes the object from the dictionary.\n\nIn case of CosStream objects the data is added to the extent dictionary.\n\nExample\n\njulia> set!(catalog, cn\"Version\", cn\"1.4\")\n\njulia> <<\n...\n/Version /1.4\n...\n>>\n\n\n\n\n\n","category":"method"},{"location":"#PDFIO.Cos.CosArray","page":"API Reference","title":"PDFIO.Cos.CosArray","text":"    CosArray\n\nAn array in a PDF file. The objects can be any combination of CosObject.\n\n\n\n\n\n","category":"type"},{"location":"#Base.length-Tuple{CosArray}","page":"API Reference","title":"Base.length","text":"    length(o::CosArray) -> Int\n\nNumber of elements in CosArray\n\nExample\n\njulia> a = CosArray(CosObject[CosInt(1), CosFloat(2f0),\n                              CosInt(3), CosFloat(4f0)])\n[1 2.0 3 4.0 ]\n\njulia> length(a)\n4\n\n\n\n\n\n","category":"method"},{"location":"#PDFIO.Cos.CosStream","page":"API Reference","title":"PDFIO.Cos.CosStream","text":"    CosStream\n\nA stream object in a PDF. Stream objects have an extends disctionary, followed by binary data.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.CosIndirectObjectRef","page":"API Reference","title":"PDFIO.Cos.CosIndirectObjectRef","text":"    CosIndirectObjectRef\n\nA parsed data structure to ensure the object information is stored as an object. This has no meaning without a associated CosDoc. When a reference object is hit the object should be searched from the CosDoc and returned.\n\n\n\n\n\n","category":"type"},{"location":"#Base.get","page":"API Reference","title":"Base.get","text":"    get(o::CosObject) -> val\n    get(o::CosIndirectObjectRef) -> (objnum, gennum)\n\n\n\n\n\n    get(o::CosArray, isNative=false) -> Vector{CosObject}\n\nAn array in a PDF file. The objects can be any combination of CosObject.\n\nisNative = true will return the underlying native object inside the CosArray by invoking get method on it.\n\nExample\n\njulia> a = CosArray(CosObject[CosInt(1), CosFloat(2f0), CosInt(3), CosFloat(4f0)])\n[1 2.0 3 4.0 ]\n\njulia> get(a)\n4-element Array{CosObject,1}:\n 1  \n 2.0\n 3  \n 4.0\n\njulia> get(a, true)\n4-element Array{Real,1}:\n 1    \n 2.0f0\n 3    \n 4.0f0\n\n\n\n\n\n    get(dict::CosDict, name::CosName, defval::T = CosNull) where T ->\n                                                            Union{CosObject, T}\n    get(stm::CosStream, name::CosName, defval::T = CosNull) where T ->\n                                                            Union{CosObject, T}\n\nReturns the value as a CosObject for the key name or the defval provided.\n\nIn case of CosStream objects the data is collected from the extent dictionary.\n\nExample\n\njulia> get(catalog, cn\"Version\")\nnull\n\njulia> get(catalog, cn\"Version\", cn\"1.4\")\n/1.4\n\njulia> get(catalog, cn\"Version\", \"1.4\")\n\"1.4\"\n\n\n\n\n\n    get(stm::CosStream) -> IO\n\nDecodes the stream and provides output as an IO.\n\nExample\n\njulia> stm\n\n448 0 obj\n<<\n\t/FFilter\t/FlateDecode\n\t/F\t(/tmp/tmpIyGPhL/tmp9hwwaG)\n\t/Length\t437\n>>\nstream\n...\nendstream\nendobj\n\njulia> io = get(stm)\nIOBuffer(data=UInt8[...], readable=true, writable=true, ...)\n\n\n\n\n\n\n","category":"function"},{"location":"#PD-1","page":"API Reference","title":"PD","text":"","category":"section"},{"location":"#","page":"API Reference","title":"API Reference","text":"PDDoc\npdDocOpen\npdDocClose\npdDocGetCatalog\npdDocGetNamesDict\npdDocGetInfo\npdDocGetCosDoc\npdDocGetPage\npdDocGetPageCount\npdDocGetPageRange\npdDocHasPageLabels\npdDocGetPageLabel\npdDocGetOutline\npdDocHasSignature\npdDocValidateSignatures\npdPageGetContents\npdPageIsEmpty\npdPageGetCosObject\npdPageGetContentObjects\npdPageGetMediaBox\npdPageGetFonts\npdPageExtractText\npdPageGetPageNumber\npdFontIsBold\npdFontIsItalic\npdFontIsFixedW\npdFontIsAllCap\npdFontIsSmallCap\nPDOutline\nPDOutlineItem\nPDDestination\npdOutlineItemGetAttr","category":"page"},{"location":"#PDFIO.PD.PDDoc","page":"API Reference","title":"PDFIO.PD.PDDoc","text":"    PDDoc\n\nAn in memory representation of a PDF document. Mostly, used as an opaque handle to be passed on to other methods.\n\nSee pdDocOpen.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.pdDocOpen","page":"API Reference","title":"PDFIO.PD.pdDocOpen","text":"    pdDocOpen(filepath::AbstractString) -> PDDoc\n\nOpens a PDF document and provides the PDDoc document object for subsequent query into the PDF file. filepath is the path to the PDF file in the relative or absolute path format.\n\nRemember to release the document with pdDocClose, once the object is no longer required. Although doc has certain members, it should normally considered as an opaque handle. \n\nExample\n\njulia> doc = pdDocOpen(\"test/PDFTest-0.0.4/stillhq/3.pdf\")\n\nPDDoc ==>\n\nCosDoc ==>\n\tfilepath:\t\t/home/sambit/.julia/dev/PDFIO/test/PDFTest-0.0.4/stillhq/3.pdf\n\tsize:\t\t\t817945\n\thasNativeXRefStm:\t false\n\tTrailer dictionaries: \n\t<<\n\t/Info\t146 0 R\n\t/Prev\t814755\n\t/Size\t163\n\t/Root\t154 0 R\n\t/ID\t[<2ff783c9846ab546bd49f709cb7be307> <2ff783c9846ab546bd49f709cb7be307> ]\n>>\n\t<<\n\t/Size\t153\n\t/ID\t[<2ff783c9846ab546bd49f709cb7be307> <2ff783c9846ab546bd49f709cb7be307> ]\n>>\n\nCatalog:\n154 0 obj\n<<\n\t/Type\t/Catalog\n\t/Pages\t152 0 R\n>>\nendobj\n\nisTagged: none\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocClose","page":"API Reference","title":"PDFIO.PD.pdDocClose","text":"    pdDocClose(doc::PDDoc, num::Int) -> Nothing\n\nReclaim the resources associated with a PDDoc object. Once called the PDDoc object cannot be further used.\n\nExample\n\njulia> pdDocClose(doc)\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetCatalog","page":"API Reference","title":"PDFIO.PD.pdDocGetCatalog","text":"    pdDocGetCatalog(doc::PDDoc) -> CosObject\n\nCatalog is considered the topmost level object in  PDF document that is subsequently used to traverse and extract information from a PDF document. To be used for accessing PDF internal objects from document structure when no direct API is available.\n\nExample\n\njulia> pdDocGetCatalog(doc)\n\n154 0 obj\n<<\n\t/Pages\t152 0 R\n\t/Type\t/Catalog\n>>\nendobj\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetNamesDict","page":"API Reference","title":"PDFIO.PD.pdDocGetNamesDict","text":"    pdDocGetNamesDict(doc::PDDoc) -> CosObject\n\nSome information in PDF is stored as name and value pairs not essentially a dictionary. They are all aggregated and can be accessed from one names dictionary object in the document catalog. This method provides access to such values in a PDF file. Not all PDF document may have a names dictionary. In such cases, a CosNull object may be returned.\n\nPlease refer to the PDF specification for further details.\n\nExample\n\njulia> pdDocGetNamesDict(doc)\n\n220 0 obj\n<<\n\t/IDS\t123 0 R\n\t/Dests\t119 0 R\n\t/URLS\t124 0 R\n>>\nendobj\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetInfo","page":"API Reference","title":"PDFIO.PD.pdDocGetInfo","text":"    pdDocGetInfo(doc::PDDoc) -> Dict\n\nGiven a PDF document provides the document information available in the Document Info dictionary. The information typically includes creation date, modification date, author, creator used etc. However, all information content are not mandatory. Hence, all information needed may not be available in a document. If document does not have Info dictionary at all this method returns nothing.\n\nPlease refer to the PDF specification for further details.\n\nExample\n\njulia> pdDocGetInfo(doc)\nDict{String,Union{CDDate, String, CosObject}} with 7 entries:\n  \"Subject\"  => \"AU-B Australian Documents\"\n  \"Producer\" => \"HPA image bureau 1998-1999\"\n  \"Author\"   => \"IP Australia\"\n  \"ModDate\"  => D:19990527113911Z\n  \"Keywords\" => \"Patents\"\n  \"Creator\"  => \"HPA image bureau 1998-1999\"\n  \"Title\"    => \"199479714D\"\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetCosDoc","page":"API Reference","title":"PDFIO.PD.pdDocGetCosDoc","text":"    pdDocGetCosDoc(doc::PDDoc) -> CosDoc\n\nPDF document format is developed in two layers. A logical PDF document information is represented over a physical file structure called COS. CosDoc is an access object to the physical file structure of the PDF document. To be used for accessing PDF internal objects from document structure when no direct API is available.\n\nOne can access any aspect of PDF using the COS level APIs alone. However, they may require you to know the PDF specification in details and it is not the most intuititive.\n\nExample\n\njulia> cosdoc = pdDocGetCosDoc(doc)\n\nCosDoc ==>\n\tfilepath:\t\t/home/sambit/.julia/dev/PDFIO/test/PDFTest-0.0.4/stillhq/3.pdf\n\tsize:\t\t\t817945\n\thasNativeXRefStm:\t false\n\tTrailer dictionaries: \n\t<<\n\t/ID\t[<2ff783c9846ab546bd49f709cb7be307> <2ff783c9846ab546bd49f709cb7be307> ]\n\t/Size\t163\n\t/Prev\t814755\n\t/Info\t146 0 R\n\t/Root\t154 0 R\n>>\n\t<<\n\t/ID\t[<2ff783c9846ab546bd49f709cb7be307> <2ff783c9846ab546bd49f709cb7be307> ]\n\t/Size\t153\n>>\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetPage","page":"API Reference","title":"PDFIO.PD.pdDocGetPage","text":"    pdDocGetPage(doc::PDDoc, num::Int) -> PDPage\n    pdDocGetPage(doc::PDDoc, ref::CosIndirectObjectRef) -> PDPage\n\nGiven a document absolute page number or object reference, provides the associated page object.\n\nExample\n\njulia> page = pdDocGetPage(doc, 1)\nPDFIO.PD.PDPageImpl(...)\njulia> page = pdDocGetPage(doc, CosIndirectObjectRef(155, 0))\nPDFIO.PD.PDPageImpl(...)\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetPageCount","page":"API Reference","title":"PDFIO.PD.pdDocGetPageCount","text":"    pdDocGetPageCount(doc::PDDoc) -> Int\n\nReturns the number of pages associated with the document.\n\nExample\n\njulia> pdDocGetPageCount(doc)\n30\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetPageRange","page":"API Reference","title":"PDFIO.PD.pdDocGetPageRange","text":"    pdDocGetPageRange(doc::PDDoc, nums::AbstractRange{Int}) -> Vector{PDPage}\n    pdDocGetPageRange(doc::PDDoc, label::AbstractString) -> Vector{PDPage}\n\nGiven a range of page numbers or a label returns an array of pages associated with it. For a detailed explanation on page labels, refer to the method pdDocHasPageLabels.\n\nExample\n\njulia> pages = pdDocGetPageRange(doc, 1:4);\n\njulia> typeof(pages)\nArray{PDFIO.PD.PDPageImpl,1}\n\njulia> length(pages)\n4\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocHasPageLabels","page":"API Reference","title":"PDFIO.PD.pdDocHasPageLabels","text":"    pdDocHasPageLabels(doc::PDDoc) -> Bool\n\nReturns true if the document has page labels defined.\n\nAs per PDF Specification 1.7 Section 12.4.2, a document may optionally define page labels (PDF 1.3) to identifyeach page visually on the screen or in print. Page labels and page indices need not coincide: the indices shallbe fixed, running consecutively through the document starting from 0 for the first page, but the labels may be specified in any way that is appropriate for the particular document.\n\nExample\n\njulia> PDFIO.PD.pdDocHasPageLabels(doc)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetPageLabel","page":"API Reference","title":"PDFIO.PD.pdDocGetPageLabel","text":"    pdDocGetPageLabel(doc::PDDoc, pageno::Int) -> String\n\nReturns the page label if the page has a page label associated to it.\n\nAs per PDF Specification 1.7 Section 12.4.2, a document may optionally define page labels (PDF 1.3) to identify each page visually on the screen or in print. Page labels and page indices need not coincide: the indices shallbe fixed, running consecutively through the document starting from 0 for the first page, but the labels may be specified in any way that is appropriate for the particular document.\n\nExample\n\njulia> pdDocGetPageLabel(doc, 3)\n\"ii\"\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocGetOutline","page":"API Reference","title":"PDFIO.PD.pdDocGetOutline","text":"    pdDocGetOutline(doc::PDDoc) -> PDOutline\n\nGiven a PDF document provides the document Outline (Table of Contents) available in the Document Catalog dictionary. If document does not have Outline, this method returns nothing.\n\nA PDF document may contain a document outline that the conforming reader may display on the screen, allowing the user to navigate interactively from one part of the document to another. The outline consists of a tree-structured hierarchy of outline items (sometimes called bookmarks), which serve as a visual table of contents to display the document’s structure to the user. The user may interactively open and close individual items by clicking them with the mouse. When an item is open, its immediate children in the hierarchy shall become visible on the screen; each child may in turn be open or closed, selectively revealing or hiding further parts of the hierarchy. When an item is closed, all of its descendants in the hierarchy shall be hidden. Clicking the text of any visible item activates the item, causing the conforming reader to jump to a destination or trigger an action associated with the item. - Section 12.3.3 - Document management — Portable document format — Part 1: PDF 1.7\n\nExample\n\njulia> outline = pdDocGetOutline(doc)\n555 0 R\n\njulia> iob = IOBuffer();\n\njulia> using AbstractTrees; print_tree(iob, outline)\n\njulia> write(stdout, iob.data)\nContents\n├─ Table of Contents\n├─ 1. Introduction\n├─ 2. Quick Steps - Kernel Compile\n│  ├─ 2.1. Precautionary Preparations\n│  ├─ 2.2. Minor Upgrading of Kernel\n│  ├─ 2.3. For the Impatient\n│  ├─ 2.4. Building New Kernel - Explanation of Steps\n│  ├─ 2.5. Troubleshooting\n...\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocHasSignature","page":"API Reference","title":"PDFIO.PD.pdDocHasSignature","text":"    pdDocHasSignature(doc::PDDoc) -> Bool\n\nReturns true when the document has at least one signature field.\n\nThis does not mean there is an actual digital signature embedded in the document. A PDF document can be signed and content can be approved by one or more reviewers. Signature fields are placeholders for storing and rendering such information.\n\nExample\n\njulia> pdDocHasSignature(doc)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdDocValidateSignatures","page":"API Reference","title":"PDFIO.PD.pdDocValidateSignatures","text":"    pdDocValidateSignatures(doc::PDDoc; export_certs=false) -> Vector{Dict{Symbol, Any}}\n\nInput\n\nparam Description\ndoc The document for which all the signatures are to be validated.\nexport_certs Optional keyword parameter when set, exports all the\n certificates that are embeded in the PDF document. These\n certificates can be for end-entities or one or more certifying\n authorities.\n Certificates are exported to the file <PDF filename>.pem.\n\nOutput\n\nVector of dictionary objects representing one dictionary object for each signature. The dictionary objects map the symbols to output as per the following table. \n\nSymbol Description\n:Name The name of the person or authority signing the document.\n:P Object reference of the page in which the signature is found.\n:M The CDDate when the document was signed.\n:certs The certificates associated with every signature object.\n:subfilter The subfilter of PDF signature object.\n:FQT Fully qualified title of the signature form.\n:chain The certificate chain that validated the signature.\n:passed Validation status of the signature (true / false)\n:error_message Error message returned during the validation\n:stacktrace The stack dump of where the validation failure occurred\n\nNotes\n\nAny additional certificates needed for validating a certificate trust chain has to be added manually to the Trust Store file at: <Package Directory>/data/certs/cacerts.pem in the PEM format. Normally, certificate authorities (root as well as intermediate) are represented in the trust store.\nPresence of an end-entity certificate in the Trust Store ensures that the chain validation for the certificate does not have to be carried out. However, this is not considered a good practice for certificates as the certificate validation is an important attribute to avoid security breaches in the chain. In case of self-signed certificates with not CA capabilities this may be the only option. \nValidation of digital signatures are limited to the approval signature validation as per section 12.8.1 of PDF Spec. 1.7. Signatures for permissions and usage rights are not validated as per this method. This API only provides a validation report. It does not modify access to any parts of the document based on the validation output. The consumer of the API needs to take appropriate action based on the validation report as desired in their applications.\nRevocation - When time is embedded in the signature as signing-time attribute or a signed timestamp or PDF sigature dictionary has M attribute, then those are picked up for validation. However, revocation information are not used during validation.\nPDF 2.0 Support - The support is only experimental. While some subfilters like /ETSI.CAdES.detached are supported. Document Security Store (DSS) and Document Time Stamp (DTS) has not been implemented.\n\nExample\n\njulia> r = pdDocValidateSignatures(doc);\n\njulia> r[1] # Failure case\nDict{Symbol,Any} with 8 entries:\n  :Name          => \"JAYANT KUMAR ARORA\"\n  :P             => 1 0 R\n  :M             => D:20190425173659+05'30\n  :error_message => \"Error in Crypto Library:\n                        140322274480320:error:02001002:system library:...\"\n  :subfilter     => /adbe.pkcs7.sha1\n  :stacktrace    => [\"error(::String) at error.jl:33\",\n                     \"openssl_error(::Int32) at PDCrypt.jl:96\",\n                     \"PDFIO.PD.PDCertStore() at PDCrypt.jl:148\",\n                     ...]\n  :FQT           => \"Signature1\"\n  :passed        => false\n\njulia> r[1] # Passed case\nDict{Symbol,Any} with 8 entries:\n  :Name      => \"JAYANT KUMAR ARORA\"\n  :P         => 1 0 R\n  :M         => D:20190425173659+05'30\n  :certs     => Dict{Symbol,Any}[Certificate Parameters...]\n  :subfilter => /adbe.pkcs7.sha1\n  :FQT       => \"Signature1\"\n  :chain     => Dict{Symbol,Any}[Certificate Parameters...]\n  :passed    => true\n\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageGetContents","page":"API Reference","title":"PDFIO.PD.pdPageGetContents","text":"    pdPageGetContents(page::PDPage) -> CosObject\n\nPage rendering objects are normally stored in a CosStream object in a PDF file. This method provides access to the stream object.\n\nPlease refer to the PDF specification for further details.\n\nExample\n\njulia> pdPageGetContents(page)\n\n448 0 obj\n<<\n\t/Length\t437\n\t/FFilter\t/FlateDecode\n\t/F\t(/tmp/tmpZnGGFn/tmp5J60vr)\n>>\nstream\n...\nendstream\nendobj\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageIsEmpty","page":"API Reference","title":"PDFIO.PD.pdPageIsEmpty","text":"    pdPageIsEmpty(page::PDPage) -> Bool\n\nReturns true when the page has no associated content object.\n\nExample\n\njulia> pdPageIsEmpty(page)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageGetCosObject","page":"API Reference","title":"PDFIO.PD.pdPageGetCosObject","text":"    pdPageGetCosObject(page::PDPage) -> CosObject\n\nPDF document format is developed in two layers. A logical PDF document information is represented over a physical file structure called COS. This method provides the internal COS object associated with the page object.\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageGetContentObjects","page":"API Reference","title":"PDFIO.PD.pdPageGetContentObjects","text":"    pdPageGetContentObjects(page::PDPage) -> CosObject\n\nPage rendering objects are normally stored in a CosStream object in a PDF file. This method provides access to the stream object.\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageGetMediaBox","page":"API Reference","title":"PDFIO.PD.pdPageGetMediaBox","text":"    pdPageGetMediaBox(page::PDPage) -> CDRect{Float32}\n    pdPageGetCropBox(page::PDPage) -> CDRect{Float32}\n\nReturns the media box associated with the page. See 14.11.2 PDF 1.7 Spec.\n\nIt's typically, the designated size of the paper for the page. When a crop box is not defined, it defaults to the media box.\n\nExample\n\njulia> pdPageGetMediaBox(page)\nRect:[0.0 0.0 595.0 792.0]\n\njulia> pdPageGetCropBox(page)\nRect:[0.0 0.0 595.0 792.0]\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageGetFonts","page":"API Reference","title":"PDFIO.PD.pdPageGetFonts","text":"    pdPageGetFonts(page::PDPage) -> Dict{CosName, PDFont}()\n\nReturns a dictionary of fonts in the page.\n\n#Example\n\njulia> pdPageGetFonts(page)\nDict{CosName,PDFIO.PD.PDFont} with 4 entries:\n  /F0 => PDFont(…\n  /F4 => PDFont(…\n  /F8 => PDFont(…\n  /F9 => PDFont(…\n\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageExtractText","page":"API Reference","title":"PDFIO.PD.pdPageExtractText","text":"    pdPageExtractText(io::IO, page::PDPage) -> IO\n\nExtracts the text from the page. This extraction works best for tagged PDF files. For PDFs not tagged, some line and word breaks will not be extracted properly.\n\nExample\n\nFollowing code will extract the text from a full PDF file.\n\nfunction getPDFText(src, out)\n    doc = pdDocOpen(src)\n    docinfo = pdDocGetInfo(doc)\n    open(out, \"w\") do io\n\t\tnpage = pdDocGetPageCount(doc)\n        for i=1:npage\n            page = pdDocGetPage(doc, i)\n            pdPageExtractText(io, page)\n        end\n    end\n    pdDocClose(doc)\n    return docinfo\nend\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdPageGetPageNumber","page":"API Reference","title":"PDFIO.PD.pdPageGetPageNumber","text":"    pdPageGetPageNumber(page::PDPage)\n\nReturns the page number of the document page.\n\nExample\n\njulia> pdPageGetPageNumber(page)\n1\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdFontIsBold","page":"API Reference","title":"PDFIO.PD.pdFontIsBold","text":"    pdFontIsBold(pdfont::PDFont)    ->Bool\n\nReturns `true` is the fonts have the attribute specified\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdFontIsItalic","page":"API Reference","title":"PDFIO.PD.pdFontIsItalic","text":"    pdFontIsItalic(pdfont::PDFont)  ->Bool\n\nReturns `true` is the fonts have the attribute specified\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdFontIsFixedW","page":"API Reference","title":"PDFIO.PD.pdFontIsFixedW","text":"    pdFontIsFixedW(pdfont::PDFont)  ->Bool\n\nReturns `true` is the fonts have the attribute specified\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdFontIsAllCap","page":"API Reference","title":"PDFIO.PD.pdFontIsAllCap","text":"    pdFontIsAllCap(pdfont::PDFont)  ->Bool\n\nReturns `true` is the fonts have the attribute specified\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.pdFontIsSmallCap","page":"API Reference","title":"PDFIO.PD.pdFontIsSmallCap","text":"    pdFontIsSmallCap(pdfont::PDFont)->Bool\n\nReturns `true` is the fonts have the attribute specified\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.PD.PDOutline","page":"API Reference","title":"PDFIO.PD.PDOutline","text":"    PDOutline\n\nRepresentation of PDF document Outline (Table of Contents).\n\nUse the methods from AbstractTrees package to traverse the elements.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDOutlineItem","page":"API Reference","title":"PDFIO.PD.PDOutlineItem","text":"    PDOutlineItem\n\nRepresentation of PDF document Outline item.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDDestination","page":"API Reference","title":"PDFIO.PD.PDDestination","text":"    PDDestination\n\nUsed for variety of purposes to locate a rectangular region in a PDF document. Particularly, used in outlines, actions etc.\n\nThe structure can denote a location outside of a document as well like in remote GoTo(GoToR) actions. In such cases, it's best be used with filename additionally. Moreover, page references have no meaning in remote file references. Hence, the pageno attribute has been set to Int unlike the PDF Spec 32000-2008 12.3.2.2.\n\n- `pageno::Int` - Page number location\n- `layout::CosName` - Various view layouts are possible. Please review the\n\nPDF spec for details.      - values::Vector{Float32} - [left, bottom, right, top] sequence array. Not     all values are used. The usage depends on the layout parameter.     - zoom::Float32 - Zoom value for the view. Can be zero depending on     - layout where it's intrinsic; hence, redundant.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.pdOutlineItemGetAttr","page":"API Reference","title":"PDFIO.PD.pdOutlineItemGetAttr","text":"    pdOutlineItemGetAttr(item::PDOutlineItem) -> Dict{Symbol, Any}\n\nAttributes stored with an PDOutlineItem object. The traversal parameters like Prev, Next, First, Last and Parent are stored with the structure.\n\nThe following keys are stored in the dictionary object returned:\n\n:Title - The title assigned to the item (shows up in the table of content)\n:Count - A representation of no of items open under the outline item. Please\n\nrefer to the PDF Spec 32000-2008 section 12.3.2.2 for details. Mostly, used for rendering on a user interface.\n\n:Destination - (filepath, PDDestination) value. Filepath is an empty string\n\nif the destination refers to a location in the same PDF file. This parameter is a combination of /Dest and /A attribute in the PDF specification. The action element is analyzed and data is extracted and stored with the PDDestination as the final refered location.\n\n:C - The color of the outline in the DeviceRGB space.\n:F - Flags for title text rendering italic=1, bold=2\n\nExample\n\n    julia> pdOutlineItemGetAttr(outlineitem)\nDict{Symbol,Any} with 5 entries:\n  :F           => 0x00\n  :Title       => \"Table of Contents\"\n  :Count       => 0\n  :Destination => (\"\", PDDestination(2, /XYZ, Float32[0.0, 0.0, 0.0, 756.0], 0.0))\n  :C           => Float32[0.0, 0.0, 0.0]\n\n\n\n\n\n","category":"function"},{"location":"#PDF-Page-objects-1","page":"API Reference","title":"PDF Page objects","text":"","category":"section"},{"location":"#","page":"API Reference","title":"API Reference","text":"PDPageObject\nPDPageElement\nPDPageObjectGroup\nPDPageTextObject\nPDPageTextRun\nPDPageMarkedContent\nPDPageInlineImage\nPDPage_BeginGroup\nPDPage_EndGroup","category":"page"},{"location":"#PDFIO.PD.PDPageObject","page":"API Reference","title":"PDFIO.PD.PDPageObject","text":"    PDPageObject\n\nThe content streams associated with PDF pages contain the objects that can be rendered. These objects are represented by PDPageObject. These objects can contain a postfix notation based operator prefixed by its operands like:\n\n(Draw this text) Tj\n\nAs can be seen above, the string object is a CosString which is a parameter to the operand Tj or draw text. These class of objects are represented by PDPageElement.\n\nHowever, there are certain objects which only provide grouping information or begin and end markers for grouping information. For example, a text object:\n\nBT\n    /F1 11 Tf  %selectfont\n    (Draw this text) Tj\nET\n\nThese kind of objects are represented by PDPageObjectGroup. In this case, the PDPageObjectGroup contains four PDPageElement. Namely, represented as operators BT, Tf, Tj, ET.\n\nPDPageElement and PDPageObjectGroup can be extended by composition. Hence, there are more specialized objects that can be seen as well.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPageElement","page":"API Reference","title":"PDFIO.PD.PDPageElement","text":"    PDPageElement\n\nA representation of a content object with operator and operand. See PDPageObject for more details.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPageObjectGroup","page":"API Reference","title":"PDFIO.PD.PDPageObjectGroup","text":"    PDPageObjectGroup\n\nA representation of a content object that encloses other content objects. See PDPageObject for more details.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPageTextObject","page":"API Reference","title":"PDFIO.PD.PDPageTextObject","text":"    PDPageTextObject\n\nA PDPageObjectGroup object that represents a block of text. See PDPageObject for more details.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPageTextRun","page":"API Reference","title":"PDFIO.PD.PDPageTextRun","text":"    PDPageTextRun\n\nIn PDF text may not be contiguous as there may be chnge of font, style, graphics rendering parameters. PDPageTextRun is a unit of text which can be rendered without any change to the graphical parameters. There is no guarantee that a text run will represent a meaningful word or sentence.\n\nPDPageTextRun is a composition implementation of PDPageElement.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPageMarkedContent","page":"API Reference","title":"PDFIO.PD.PDPageMarkedContent","text":"    PDPageMarkedContent\n\nA PDPageObjectGroup object that represents a group of a object that is logically grouped together in case of a structured PDF document.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPageInlineImage","page":"API Reference","title":"PDFIO.PD.PDPageInlineImage","text":"    PDPageInlineImage\n\nMost images in PDF documents are defined in the PDF document and referenced from the page content stream. PDPageInlineImage objects are directly defined in the page content stream.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPage_BeginGroup","page":"API Reference","title":"PDFIO.PD.PDPage_BeginGroup","text":"    PDPage_BeginGroup\n\nA PDPageElement that represents the beginning of a group object.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.PD.PDPage_EndGroup","page":"API Reference","title":"PDFIO.PD.PDPage_EndGroup","text":"    PDPage_EndGroup\n\nA PDPageElement that represents the end of a group object.\n\n\n\n\n\n","category":"type"},{"location":"#COS-Methods-1","page":"API Reference","title":"COS Methods","text":"","category":"section"},{"location":"#","page":"API Reference","title":"API Reference","text":"CosDoc\ncosDocOpen\ncosDocClose\ncosDocGetRoot\ncosDocGetObject","category":"page"},{"location":"#PDFIO.Cos.CosDoc","page":"API Reference","title":"PDFIO.Cos.CosDoc","text":"    CosDoc\n\nPDF file structure provides how the objects are arranged in a PDF file. PDF is designed to be accessed in a random access order. Some of the objects in PDF like fonts can be referred from multiple page objects. To address these concerns objects are provided reference identifiers and mappings are provided from various locations in the PDF files. Moreover, to reduce the size of the files, the objects are put inside stream containers and can be compressed. Access to a specific object reference may need several lookups before the actual object can be traced. All these lead to a fairly complex arrangement of objects. CosDoc wraps all the object reference schemes and provide a simplified API called cosDocGetObject and simplifies object look up.  Thus any PDF object can be classified into the following forms based on how they are represented in a document:\n\nDirect Objects: Direct objects are defined where they are referred or used. \nIndirect Objects: Indirect objects have reference identifiers, there location in a PDF document is described through a Object Reference identifier.\n\nOne can access any aspect of PDF using the COS level APIs alone. However, they may require you to know the PDF specification in details and they are not the most intuititive.\n\n\n\n\n\n","category":"type"},{"location":"#PDFIO.Cos.cosDocOpen","page":"API Reference","title":"PDFIO.Cos.cosDocOpen","text":"    cosDocOpen(filepath::AbstractString) -> CosDoc\n\nProvides the access to the physical file and file structure of the PDF document. Returns a CosDoc which can be subsequently used for all query into the PDF files. Remember to release the document with cosDocClose, once the object is used.\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.Cos.cosDocClose","page":"API Reference","title":"PDFIO.Cos.cosDocClose","text":"    cosDocClose(doc::CosDoc)\n\nReclaims all system resources consumed by the CosDoc. The CosDoc should not be used after this method is called. cosDocClose only needs to be explicitly called if you have opened the document by 'cosDocOpen'. Documents opened with pdDocOpen do not need to use this method.\n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.Cos.cosDocGetRoot","page":"API Reference","title":"PDFIO.Cos.cosDocGetRoot","text":"    cosDocGetRoot(doc::CosDoc) -> CosDoc\n\nThe structural starting point of a PDF document. Also known as document catalog dictionary. \n\n\n\n\n\n","category":"function"},{"location":"#PDFIO.Cos.cosDocGetObject","page":"API Reference","title":"PDFIO.Cos.cosDocGetObject","text":"    cosDocGetObject(doc::CosDoc, obj::CosObject) -> CosObject\n\nPDF objects are distributed in the file and can be cross referenced from one location to another. This is called as indirect object referencing. However, to extract actual information one needs access to the complete object (direct object). This method provides access to the direct object after searching for the object in the document structure. If an indirect object reference is passed as obj parameter the complete indirect object (reference as well as all content of the object) are returned. A direct object passed to the method is returned as is without any translation. This ensures the user does not have to go through checking the type of the objects before accessing the contents.\n\nExample\n\njulia> cosDocGetObject(doc.cosDoc, CosIndirectObjectRef(555, 0))\n\n555 0 obj\n<<\n\t/Count\t18\n\t/Last\t629 0 R\n\t/First\t556 0 R\n>>\nendobj\n\njulia> cosDocGetObject(doc.cosDoc, cn\"DirectObject\")\n/DirectObject\n\n\n\n\n\n    cosDocGetObject(doc::CosDoc, dict::CosObject, key::Union{CosName, CosNullType}) -> CosObject\n\nReturns the object referenced inside the dict dictionary.\n\ndict can be a PDF dictionary object reference or an indirect object or  a direct CosDict object.\nkey can be CosNull as well. In such a case, a replicated CosDict with  direct or indirect objects will be returned for all the input dict  keys.\n\nExample\n\njulia> catalog\n\n652 0 obj\n<<\n\t/Outlines\t555 0 R\n\t/PageLayout\t/SinglePage\n\t/PageMode\t/UseOutlines\n\t/Pages\t446 0 R\n\t/Type\t/Catalog\n\t/OpenAction\t[447 0 R /XYZ null null 0 ]\n>>\nendobj\n\njulia> pages = cosDocGetObject(doc.cosDoc, catalog, cn\"Pages\")\n\n446 0 obj\n<<\n\t/Kids\t[447 0 R 449 0 R 451 0 R]\n\t/Count\t3\n\t/Type\t/Pages\n>>\nendobj\n\njulia> cosDocGetObject(doc.cosDoc, catalog, cn\"PageLayout\")\n/SinglePage\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#PDFIO-License-1","page":"PDFIO License","title":"PDFIO License","text":"","category":"section"},{"location":"LICENSE/#Intention-and-Guidelines-1","page":"PDFIO License","title":"Intention and Guidelines","text":"","category":"section"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"The software does not distinguish between academic research from commercial applications. The purposes of both activities should not get defeated in using this software. However, the authors and creators of this software must be given the due recognition they deserve. The software has been made available under the MIT Expat License keeping with the stated intention. We also believe:","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"Any integration with any other software or implementation of any features that may reduce the flexibility of the research community or commercial usage of the original software or affect the authors' moral rights on the original software, is discouraged.\nWe presume your usage of this software is for purposes that's legal and morally aligned to the country of your operations, stakeholders and customers and world community in general.\nThe functionalities of this software should not be used to overcome technical restrictions imposed on a document like Digital Rights Management (DRM), or remove such restrictions, unless you have the legal access and rights over the document that permits you to do so.\nThe above conditions do not apply to activities that are permissible as fairuse under the law and can be carried out using this software.","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"If your intentions are aligned to the guidelines above, you can use the software under the following license.","category":"page"},{"location":"LICENSE/#License-Text-1","page":"PDFIO License","title":"License Text","text":"","category":"section"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"The PDFIO.jl package is licensed under the MIT \"Expat\" License:","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"Copyright (c) 2017-2019: Sambit Kumar Dash.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"PDFIO is dependent on packages like AbstractTrees, AdobeGlyphList,  BinaryBuilder, Documenter, LabelNumerals, Rectangle, RomanNumerals, ZipFile  that use similar licenses. ","category":"page"},{"location":"LICENSE/#LZW-Decompression-1","page":"PDFIO License","title":"LZW Decompression","text":"","category":"section"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"The author has provided an own implementation of the LZW decompression clearly believing the older patents are no longer in force. Excerpts from reference article from GNU Website provided here for reference:","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"There is no special patent threat to GIF format nowadays as far as we know;  the patents that were used to attack GIF have expired. Nonetheless, this  article will remain pertinent as long as programs can be forbidden by patents, since the same sorts of things could happen in any area of computing. See our  web site policies regarding GIFs, and our web guidelines....We were able to search the patent databases of the USA, Canada, Japan, and the European Union. The Unisys patent expired on 20 June 2003 in the USA,  in Europe it expired on 18 June 2004, in Japan the patent expired on 20 June 2004 and in Canada it expired on 7 July 2004. The U.S. IBM patent expired 11 August 2006. The Software Freedom Law Center says that after 1 October 2006, there will be no significant patent claims interfering with the use of static GIFs.Animated GIFs are a different story. We do not know what patents might cover  them. However, we have not heard reports of threats against use of animated  GIFs. Any software can be threatened by patents, but we have no reason to  consider animated GIFs to be in particular danger — no particular reason to  shun them.","category":"page"},{"location":"LICENSE/#Licenses-of-third-party-libraries-or-data-1","page":"PDFIO License","title":"Licenses of third party libraries or data","text":"","category":"section"},{"location":"LICENSE/#OpenSSL-1","page":"PDFIO License","title":"OpenSSL","text":"","category":"section"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit. (http://www.openssl.org/)","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"OpenSSL is licensed under Apache License 2.0 for version 3.x and above. The detailed license can be found at: https://github.com/openssl/openssl/blob/master/LICENSE","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"Since, PDFIO can work with OpenSSL 1.1.0 the license can be seen at:","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"https://github.com/openssl/openssl/blob/OpenSSL11_0-stable/LICENSE which will be the license for all the 1.x versions of OpenSSL. ","category":"page"},{"location":"LICENSE/#Zlib-1","page":"PDFIO License","title":"Zlib","text":"","category":"section"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"The software links with Zlib library for certain decompression modules. The license for the same can be found at: https://www.zlib.net/zlib_license.html","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"Also stated here for reference:","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"/* zlib.h – interface of the 'zlib' general purpose compression library  version 1.2.11, January 15th, 2017Copyright (C) 1995-2017 Jean-loup Gailly and Mark AdlerThis software is provided 'as-is', without any express or implied  warranty.  In no event will the authors be held liable for any damages  arising from the use of this software.Permission is granted to anyone to use this software for any purpose,  including commercial applications, and to alter it and redistribute it  freely, subject to the following restrictions:The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.\nAltered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\nThis notice may not be removed or altered from any source distribution.Jean-loup Gailly        Mark Adler  jloup@gzip.org          madler@alumni.caltech.edu*/","category":"page"},{"location":"LICENSE/#Adobe-Font-Metrics-1","page":"PDFIO License","title":"Adobe Font Metrics","text":"","category":"section"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"The software utilizes Adobe Fonts Metrics data files which are included under the following license terms:","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"This file and the 14 PostScript(R) AFM files it accompanies may be used,  copied, and distributed for any purpose and without charge, with or without  modification, provided that all copyright notices are retained; that the AFM  files are not distributed without this file; that all modifications to this  file or any of the AFM files are prominently noted in the modified file(s);  and that this paragraph is not modified. Adobe Systems has no responsibility  or obligation to support the use of the AFM files.","category":"page"},{"location":"LICENSE/#Adobe-Glyph-List-1","page":"PDFIO License","title":"Adobe Glyph List","text":"","category":"section"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"The software utilizes Adobe Glyph List (AGL & AGL-FN) glyph codes that can be used under the following license terms:","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"Copyright 2002, 2010, 2015 Adobe Systems Incorporated. All rights reserved.Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.Neither the name of Adobe Systems Incorporated nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.","category":"page"},{"location":"LICENSE/#","page":"PDFIO License","title":"PDFIO License","text":"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","category":"page"}]
}
